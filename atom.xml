<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>码农杂谈</title>
  
  <subtitle>认知、成长、践行</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://thinkingpy.com/"/>
  <updated>2017-10-05T03:50:25.264Z</updated>
  <id>http://thinkingpy.com/</id>
  
  <author>
    <name>码农杂谈</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用 Go 打造简化的区块链（1）基础原型</title>
    <link href="http://thinkingpy.com/2017/09/30/building-blockchain-in-go/"/>
    <id>http://thinkingpy.com/2017/09/30/building-blockchain-in-go/</id>
    <published>2017-09-30T14:48:44.000Z</published>
    <updated>2017-10-05T03:50:25.264Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>昨天笑来老师推文《用 Go 打造区块链（1）基础原型》，看后就产生了自己读原文的想法。本着把用英语当做自己刚需的初衷，我决定读原文、译原文。这不仅能用英语，而且还能输出文字，最后还有老师的翻译进行比对，一举三得。这是“用 Go 打造简化的区块链”系列的第一篇，欢迎交流指正！</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>区块链是 21 世纪最具革命性的技术之一，正日臻成熟，潜力有待发掘。本质上，区块链只是一个分布式数据库，而它的独特性在于它不是私有的而是共有的，比如每个区块链使用者都有它的全部或部门副本。而且，区块链也让实现加密货币和智能合约成为可能。</p><p>在这个文章系列中，我们将用区块链技术打造一种简化的数字货币。</p><p>（30）</p><h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><p>让我们从“区块”开始，“区块”在“区块链”中用来存储有价值的信息。比如比特币区块是用来存储交易信息的，任何一种加密货币的本质都是如此。除了交易信息，区块还包含一些技术信息，比如区块的版本号、时间戳以及上一个区块的哈希值。</p><p>在这篇文章中，我们并不打算按照区块链或比特币描述的那样来实现区块，而是要实现一个简化版。它仅包含必要的信息，他看起像是这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Block <span class="keyword">struct</span> &#123;</div><div class="line">    Timestamp      <span class="keyword">int64</span></div><div class="line">    Data           []<span class="keyword">byte</span></div><div class="line">    PrevBlockHash  []<span class="keyword">byte</span></div><div class="line">    Hash           []<span class="keyword">byte</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>Timestamp</code> 是当前的时间戳（当区块被创建时生成），<code>Data</code> 是区块中实际有价值的信息，<code>PrevBlockHash</code> 存储了前一个区块的哈希，<code>Hash</code> 则是当前区块的哈希。按照比特币的规格，<code>Timestamp</code>,<code>PrevBlockHash</code> 和 <code>Hash</code> 称为区块头部，是单独的数据结构，而交易（就是我们这里的 <code>Data</code> )也是单独的数据结构。所以为了简化处理，我们将他们合在了一起。</p><p>那么我该如何计算哈希呢？计算哈希的方式是区块链的重要特征，而且也是区块链的安全保证。计算哈希是一项有难度的计算操作，即使在快速的计算机上也需要花费一些时间（这也是人们购买强劲 GPU 来挖比特币的原因）。这是一种有意的架构设计，这种设计使得添加新的区块有一定难度，因此也能防止添加后的区块被篡改。我们会在将来的文章中讨论并实现这种机制。</p><p>现在，我们将仅考虑区块的字段，把他们拼接起来，并计算拼接组合的 SHA-256 的哈希值。让我们用 <code>SetHash</code> 方法实现它：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">SetHash</span><span class="params">()</span></span> &#123;</div><div class="line">    timestamp := []<span class="keyword">byte</span>(strconv.FormatInt(b.Timestamp, <span class="number">10</span>))</div><div class="line">    headers := bytes.Join([][]<span class="keyword">byte</span>&#123;b.PrevBlockHash, b.Data, timestamp&#125;, []<span class="keyword">byte</span>&#123;&#125;)</div><div class="line">    hash :=sha256.Sum256(headers)</div><div class="line"></div><div class="line">    b.Hash = hash[:]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接下来，根据 Golang 语言的规范，我们将实现一个方法来简化区块的创建：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBlock</span><span class="params">(data <span class="keyword">string</span>, prevBlockHash []<span class="keyword">byte</span>)</span> *<span class="title">Block</span></span> &#123;</div><div class="line">    block := &amp;Block&#123;time.Now().Unix(), []<span class="keyword">byte</span>(data), prevBlockHash, []<span class="keyword">byte</span>&#123;&#125;&#125;</div><div class="line">    block.SetHash()</div><div class="line">    <span class="keyword">return</span> block</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>好，这就是区块！</p><h3 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h3><p>现在，让我们来实现区块链。本质上，区块链就是具备某种结构的数据库：一个有序的、方向链接列表。也就是它是按照插入的顺序来存储的，并且每一个区块都链向它的前一个区块。这种结构支持从链上快速地获取最近的区块以及高效通过哈希获取区块。</p><p>在 Golang　中可以用　array 和 map 实现这种结构：array 可以存储有序哈希（在 Go 中 array 是有序的），map  可以存储 hash-&gt;block 对（map 是 无序的）。但是对于我们的区块链原型，我只用到 array ，因为现在我们还不需要用哈希去获取区块。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Blockchain <span class="keyword">struct</span> &#123;</div><div class="line">    blocks []*Block</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这就是我们的第一个区块链，没想到居然这么简单！</p><p>现在，我们给它加上添加区块的功能：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *Blockchain)</span> <span class="title">AddBlock</span><span class="params">(data <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">    prevBlock := bc.blocks[<span class="built_in">len</span>(bc.blocks)<span class="number">-1</span>]</div><div class="line">    newBlock := NewBlock(data, prevBlock.Hash)</div><div class="line">    bc.blocks = <span class="built_in">append</span>(bc.blocks, newLBlock)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>就是这样，还是？</p><p>要添加新的区块我们必须有一个已经存在的区块，但是我们的区块链中还没有任何区块。所有在任何区块链中都必须至少有一个区块，而这第一个区块就被称作创始区块。让我来实现一个创建这种区块的方法：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGenesisBlock</span><span class="params">()</span> *<span class="title">Block</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> NewBlock(<span class="string">"Genesis Block"</span>, []<span class="keyword">byte</span>&#123;&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>现在，我们实现一个方法用创始区块来创建区块链：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBlockchain</span><span class="params">()</span> *<span class="title">Blockchain</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> &amp;Blockchain&#123;[]*Block&#123;NewGenesisBlock()&#125;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接下来我们来验证下区块链是否能运作正常：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    bc := NewBlockchain()</div><div class="line"></div><div class="line">    bc.AddBlock(<span class="string">"Send 1 BTC to Ivan"</span>)</div><div class="line">    bc.AddBlock(<span class="string">"Send 2 more BTC to Ivan"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> _, block := <span class="keyword">range</span> bc.blocks &#123;</div><div class="line">        fmt.Printf(<span class="string">"Prev. hash: %x\n"</span>, block.PrevBlockHash)</div><div class="line">        fmt.Printf(<span class="string">"Data: %s\n"</span>, block.Data)</div><div class="line">        fmt.Printf(<span class="string">"Hash: %x\n"</span>, block.Hash)</div><div class="line">        fmt.Println()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Prev. hash:</div><div class="line">Data: Genesis Block</div><div class="line">Hash: aff955a50dc6cd2abfe81b8849eab15f99ed1dc333d38487024223b5fe0f1168</div><div class="line"></div><div class="line">Prev. hash: aff955a50dc6cd2abfe81b8849eab15f99ed1dc333d38487024223b5fe0f1168</div><div class="line">Data: Send <span class="number">1</span> BTC to Ivan</div><div class="line">Hash: d75ce22a840abb9b4e8fc3b60767c4ba3f46a0432d3ea15b71aef9fde6a314e1</div><div class="line"></div><div class="line">Prev. hash: d75ce22a840abb9b4e8fc3b60767c4ba3f46a0432d3ea15b71aef9fde6a314e1</div><div class="line">Data: Send <span class="number">2</span> more BTC to Ivan</div><div class="line">Hash: <span class="number">561237522</span>bb7fcfbccbc6fe0e98bbbde7427ffe01c6fb223f7562288ca2295d1</div></pre></td></tr></table></figure></p><p>就是这样！</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>我们建立了一个非常简单的区块链原型：它仅仅是一个车区块链数组，每一区块都与前一个区块相连，实际的区块链当然要复杂的多。我们的区块链添加新的区块简单快速，而实际的区块添加则需要做一些工作：获取的添加新区块的权限之前需要执行一些繁重的计算工作（这种机制称作工作量证明 Proof-of-Work)。而且区块链是分布式的数据库，没有单独的决策者。因此，新区块的加入须要被网络中的其他参与者确认和审核（这种机制称为共识）。目前我们的区块链中还没有交易呢！</p><p>接下来，我们要挨个谈谈它的每一个特征。</p><blockquote><p>原文：<a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-1/" target="_blank" rel="external">https://jeiwan.cc/posts/building-blockchain-in-go-part-1/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;昨天笑来老师推文《用 Go 打造区块链（1）基础原型》，看后就产生了自己读原文的想法。本着把用英语当做自己刚需的初衷，我决定读原文、译原文。这不仅能用英语，而且还能输出文字，最后还有老师的翻译进行比对，一举三得。这是“用 Go 打造简化的区块链”系
      
    
    </summary>
    
    
      <category term="Blockchain" scheme="http://thinkingpy.com/tags/Blockchain/"/>
    
  </entry>
  
  <entry>
    <title>写作是每个人成长的希望</title>
    <link href="http://thinkingpy.com/2017/09/23/writing%20is%20an%20important%20way%20of%20growing/"/>
    <id>http://thinkingpy.com/2017/09/23/writing is an important way of growing/</id>
    <published>2017-09-23T15:09:06.126Z</published>
    <updated>2017-09-26T05:37:18.192Z</updated>
    
    <content type="html"><![CDATA[<p>说起来都是老生常谈话题，相信凡是有过写作经历的人都会有各自的认识。今天我来说说我对于写作的认识以及我从开始到放弃的各种经历。</p><p>说起来我的写作启蒙老师有两个，一个是小学的易老师，一个是初中的吴老师。易老师在我们镇上教语文，是个很有资历老教师。有一次作文课上读了我的一篇作文，要知道作为一名长期潜伏在班级后两排的无邪少年，突然受到了全班的瞩目，心里自是得意难耐、花儿怒放，不由想起今后跑到头排与小楠同桌的美好画面。这次意外，也让我在易老师那留了一点好印象，那次他在校门口碰到我妈说我有点“开窍”时，又让我得意了一把。后来上来初中对写作有点兴趣，其实也完全是靠这根虚荣心的小木棍撑着。</p><p>刚上初中时，吴老师教我语文，身上有一种淑香之气，听她说话仿佛有微风拂面，细腻而舒适。有个语文世界的杂志刊登了一个作文比赛，她要求我们每个人都写一篇，后来她选了几篇去参加比赛，意外的是居然也选了我。那几天每天中午不休息把我们叫到办公室改作文，我内心又紧张又得意又惊讶。见老师紧张这毛病一直没改掉，得意自是虚荣心得到了满足，惊讶的是老师批改的认真程度超出以往的认识。至此之后内心对学习产生了一点敬畏之情，上课也变得更加认真，学习也越来越好。然而初中的惬意生活只持续两年多，由于家里变故，我转学了。</p><p>挥别了熟悉的老师与同学，告别了曾经的操场与伙伴，那天下午夕阳把影子拉的很长，我拖着行李踏上北上的列车，看着窗外远去的一切，很久很久……</p><p>回到老家，一切都变矮变旧了。突如其来的变化，完全没给我年轻的心带带一丝浪花。青春就这样拐到了一条岔路上，即使不舍也只能前行。后来从高中到大学到工作，一路奔到现在。以致渐渐淡忘当初美好的时光，走向未来的道路上总有点战战惊惊，不知所措，像最终幻想里被吸食了灵魂的人。肖申克的救赎有句台词“要么忙着死，要么忙着活”，人总是要心存一些美好不是吗，不然生活怎会有意思？如今，生活工作这么忙碌，好不容易有点休息时间又是各种刷各种综艺各种剧，时间都被填满，无法忍受一点无聊的我们又拿什么去滋养内心那一点美好呢？</p><p>如果我们不按自己所想的去生活，那我们最终会按照我们生活的那样去想。没有时间想，那就静下心来写。坐在电脑前，用文字旁观自己的人生，透过键盘看到内心的那个自己，你会发现自己的生活还有很多可能性，你可以指导现在你在未来做的更好，去逐渐成为那个美好世界的自己。</p><p>有了希望就去成长，一切都会好起来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;说起来都是老生常谈话题，相信凡是有过写作经历的人都会有各自的认识。今天我来说说我对于写作的认识以及我从开始到放弃的各种经历。&lt;/p&gt;
&lt;p&gt;说起来我的写作启蒙老师有两个，一个是小学的易老师，一个是初中的吴老师。易老师在我们镇上教语文，是个很有资历老教师。有一次作文课上读了我
      
    
    </summary>
    
    
  </entry>
  
</feed>
